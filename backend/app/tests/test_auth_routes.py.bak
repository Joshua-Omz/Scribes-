"""Tests for authentication API routes.

This module contains tests for the authentication API endpoints.
"""
import pytest
from unittest.mock import MagicMock, patch
from fastapi import HTTPException
from fastapi.testclient import TestClient
from sqlalchemy.orm import Session

from app.main import app
from app.models.user import User
from app.services.auth import get_password_hash


@pytest.fixture
def mock_db():
    """Mock database session fixture."""
    return MagicMock(spec=Session)


def test_register_endpoint(client, mock_db):
    """Test user registration endpoint."""
    # Mock dependencies
    app.dependency_overrides = {}
    
    # Create test data
    user_data = {
        "email": "test@example.com",
        "username": "testuser",
        "password": "testpassword",
        "full_name": "Test User"
    }
    
    # Configure mock db to not find existing users (for uniqueness checks)
    with patch("app.routes.auth.get_db", return_value=mock_db):
        with patch("app.routes.auth.create_user") as mock_create_user:
                # Configure mock to return a new user with proper attributes
                mock_user = MagicMock()
                mock_user.id = 1
                mock_user.email = user_data["email"]
                mock_user.username = user_data["username"]
                mock_user.full_name = user_data["full_name"]
                mock_user.is_active = True
                mock_user.is_superuser = False
                mock_create_user.return_value = mock_user            # Test successful registration
            response = client.post("/api/auth/register", json=user_data)
            
            # Verify response
            assert response.status_code == 201
            assert response.json()["email"] == user_data["email"]
            assert response.json()["username"] == user_data["username"]
            assert "password" not in response.json()


def test_login_endpoint(client, mock_db):
    """Test user login endpoint."""
    # Mock dependencies
    app.dependency_overrides = {}
    
    # Create test data
    login_data = {
        "username": "testuser",
        "password": "testpassword"
    }
    
    # Create mock user
    mock_user = MagicMock(spec=User)
    mock_user.id = 1
    mock_user.username = login_data["username"]
    mock_user.hashed_password = get_password_hash(login_data["password"])
    mock_user.is_active = True
    
    # Test successful login
    with patch("app.routes.auth.get_db", return_value=mock_db):
        with patch("app.routes.auth.authenticate_user", return_value=mock_user):
            with patch("app.routes.auth.create_tokens_for_user") as mock_create_tokens:
                # Configure mock to return tokens
                mock_create_tokens.return_value = MagicMock(
                    access_token="test_access_token",
                    refresh_token="test_refresh_token",
                    token_type="bearer"
                )
                
                # Test login
                response = client.post(
                    "/api/auth/login",
                    data=login_data,
                    headers={"Content-Type": "application/x-www-form-urlencoded"}
                )
                
                # Verify response
                assert response.status_code == 200
                assert response.json()["access_token"] == "test_access_token"
                assert response.json()["refresh_token"] == "test_refresh_token"
                assert response.json()["token_type"] == "bearer"
    
    # Test failed login with incorrect credentials
    with patch("app.routes.auth.get_db", return_value=mock_db):
        with patch("app.routes.auth.authenticate_user", return_value=None):
            # Test login with bad credentials
            response = client.post(
                "/api/auth/login",
                data=login_data,
                headers={"Content-Type": "application/x-www-form-urlencoded"}
            )
            
            # Verify response
            assert response.status_code == 401
            assert "incorrect" in response.json()["detail"].lower()
    
    # Test failed login with inactive user
    mock_user.is_active = False
    with patch("app.routes.auth.get_db", return_value=mock_db):
        with patch("app.routes.auth.authenticate_user", return_value=mock_user):
            # Test login with inactive user
            response = client.post(
                "/api/auth/login",
                data=login_data,
                headers={"Content-Type": "application/x-www-form-urlencoded"}
            )
            
            # Verify response
            assert response.status_code == 401
            assert "disabled" in response.json()["detail"].lower()


def test_refresh_token_endpoint(client, mock_db):
    """Test token refresh endpoint."""
    # Mock dependencies
    app.dependency_overrides = {}
    
    # Create test data
    refresh_token = "test_refresh_token"
        
        # Test successful token refresh
        with patch("app.routes.auth.get_db", return_value=mock_db):
            with patch("app.routes.auth.verify_refresh_token") as mock_verify:
                with patch("app.routes.auth.create_tokens_for_user") as mock_create_tokens:
                    # Configure mocks
                    mock_verify.return_value = {"sub": 1}
                    mock_user = MagicMock()
                    mock_user.is_active = True
                    mock_db.query.return_value.filter.return_value.first.return_value = mock_user
                    mock_create_tokens.return_value = MagicMock(
                        access_token="new_access_token",
                        refresh_token="new_refresh_token",
                        token_type="bearer"
                    )
                    
                    # Test refresh
                    response = client.post(f"/api/auth/refresh?refresh_token={refresh_token}")                # Verify response
                assert response.status_code == 200
                assert response.json()["access_token"] == "new_access_token"
                assert response.json()["refresh_token"] == "new_refresh_token"
    
    # Test failed refresh with invalid token
    with patch("app.routes.auth.get_db", return_value=mock_db):
        with patch("app.routes.auth.verify_refresh_token") as mock_verify:
            # Configure mock to raise exception
            mock_verify.side_effect = HTTPException(status_code=401, detail="Invalid token")
            
            # Test refresh with invalid token
            response = client.post("/api/auth/refresh", json=refresh_data)
            
            # Verify response
            assert response.status_code == 401
